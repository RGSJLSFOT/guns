public static SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
    private static boolean isOverlap(String startdate1, String enddate1,String startdate2, String enddate2) {  
        Date leftStartDate = null;  
        Date leftEndDate = null;  
        Date rightStartDate = null;  
        Date rightEndDate = null;  
        try {  
            leftStartDate = format.parse(startdate1);  
            leftEndDate = format.parse(enddate1);  
            rightStartDate = format.parse(startdate2);  
            rightEndDate = format.parse(enddate2);  
        } catch (ParseException e) {  
            return false;  
        }  
          
        return   
            ((leftStartDate.getTime() >= rightStartDate.getTime())   
                    && leftStartDate.getTime() < rightEndDate.getTime())  
            ||  
            ((leftStartDate.getTime() > rightStartDate.getTime())   
                    && leftStartDate.getTime() <= rightEndDate.getTime())  
            ||  
            ((rightStartDate.getTime() >= leftStartDate.getTime())   
                    && rightStartDate.getTime() < leftEndDate.getTime())  
            ||  
            ((rightStartDate.getTime() > leftStartDate.getTime())   
                    && rightStartDate.getTime() <= leftEndDate.getTime());  
              
    }  


private static List<String> dateUtil(Date start, Date end) {
        List<String> list = new ArrayList<String>();
        long s = start.getTime();
        long e = end.getTime();

        Long oneDay = 1000 * 60 * 60 * 24l;

        while (s <= e) {
            start = new Date(s);
            list.add(new SimpleDateFormat("yyyy-MM-dd").format(start));
            s += oneDay;
        }
        return list;
    }
    
    
    
    package com.stylefeng.guns.modular.leaveTime.controller;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.mapper.Wrapper;
import com.stylefeng.guns.core.base.controller.BaseController;
import com.stylefeng.guns.core.base.tips.ErrorTip;
import com.stylefeng.guns.core.common.constant.factory.ConstantFactory;
import com.stylefeng.guns.core.log.LogObjectHolder;
import com.stylefeng.guns.core.shiro.AuthKit;
import com.stylefeng.guns.core.util.DateUtils;
import com.stylefeng.guns.core.util.ToolUtil;
import com.stylefeng.guns.modular.auditRecord.service.ISubmitRecordService;
import com.stylefeng.guns.modular.leaveTime.service.ILeaveTimeService;
import com.stylefeng.guns.modular.overTime.service.IOverTimeService;
import com.stylefeng.guns.modular.system.model.LeaveTime;
import com.stylefeng.guns.modular.system.model.Leavetimeitem;
import com.stylefeng.guns.modular.system.model.OverTime;
import com.stylefeng.guns.modular.system.model.SubmitRecord;
import com.stylefeng.guns.modular.system.model.VendorUser;
import com.stylefeng.guns.modular.system.model.Worktime;
import com.stylefeng.guns.modular.system.service.ILeavetimeitemService;
import com.stylefeng.guns.modular.system.warpper.LeaveTimeWarpper;
import com.stylefeng.guns.modular.vendorUser.service.IVendorUserService;
import com.stylefeng.guns.modular.vendorUser.service.ProjService;
import com.stylefeng.guns.modular.worktime.service.IWorktimeService;

/**
 * 请假控制器
 */
@Controller
@RequestMapping("/leaveTime")
public class LeaveTimeController extends BaseController {

    private String PREFIX = "/leaveTime/leaveTime/";

    @Autowired
    private ILeaveTimeService leaveTimeService;
    @Autowired
    private IOverTimeService overtimeService;
    @Autowired
    private IWorktimeService worktimeService;
    @Autowired
    private IVendorUserService vendorUserService;
    @Autowired
    private ISubmitRecordService submitRecordService;
    
    @Autowired
    private ILeavetimeitemService leavetimeitemService;
    
    @Autowired
    private ProjService projService;
    /**
     * 跳转到请假首页
     */
    @RequestMapping("")
    public String index(Model model) {
    	model.addAttribute("leaveTypes", ConstantFactory.me().getDictsByName("请假类型"));
        return PREFIX + "leaveTime.html";
    }

    /**
     * 跳转到添加请假
     */
    @RequestMapping("/leaveTime_add")
    public String leaveTimeAdd(Model model) {
    	model.addAttribute("leaveTypes", ConstantFactory.me().getDictsByName("请假类型"));
    	model.addAttribute("userName", ConstantFactory.me().getUserNameById((Integer)AuthKit.getUser().getId()));
        return PREFIX + "leaveTime_add.html";
    }

    /**
     * 跳转到修改请假
     */
    @RequestMapping("/leaveTime_update/{Id}")
    public String leaveTimeUpdate(@PathVariable Integer Id, Model model) {
        LeaveTime leaveTime = leaveTimeService.selectById(Id);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        model.addAttribute("leaveTypes", ConstantFactory.me().getDictsByName("请假类型"));
        model.addAttribute("startTime",sdf.format(leaveTime.getStartTime()).split(" ")[1]);
        model.addAttribute("endTime",sdf.format(leaveTime.getEndTime()).split(" ")[1]);
        model.addAttribute("item",leaveTime);
        model.addAttribute("userName",leaveTime.getUserId());
        LogObjectHolder.me().set(leaveTime);
        return PREFIX + "leaveTime_edit.html";
    }

    /**
     * 查询请假信息列表
     */
    @RequestMapping("/list")
    @ResponseBody
    public Object list(String userId,Integer leaveType,String startDate,String endDate,Integer type) {
        //Integer userId = AuthKit.getUser().getId();
        String account = AuthKit.getUser().getAccount();
        List<Map<String, Object>> leaveimes;
        if(AuthKit.hasPermission("walmart/audit")){//有审核权限
    		if(type == null || type == 0){
    			leaveimes = leaveTimeService.selectLeaveTimesToAudit(userId,leaveType,startDate,endDate,account);
    		}else if(type == 1){
    			leaveimes = leaveTimeService.selectLeaveTimesAudited(userId,leaveType,startDate,endDate,account);
    		}else{
    			leaveimes = leaveTimeService.selectLeaveTimesAudited(userId,leaveType,startDate,endDate,account);
    			leaveimes.addAll(leaveTimeService.selectLeaveTimesToAudit(userId,leaveType,startDate,endDate,account));
    		}
    	}else{ 
    		EntityWrapper<LeaveTime> entityWrapper = new EntityWrapper<LeaveTime>();
        	Wrapper<LeaveTime> result = entityWrapper.eq("userId", account);
        	if(!ToolUtil.isEmpty(leaveType)){
            	result = result.eq("leaveType", leaveType);
            }
        	if(!ToolUtil.isEmpty(startDate)){
            	result = result.ge("leaveDate", startDate);
            }
        	if(!ToolUtil.isEmpty(endDate)){
        		result = result.le("leaveDate", endDate);
        	}
        	result.orderBy("leaveDate", false);
    		leaveimes =  leaveTimeService.selectMaps(result);
    	}
    	
        return new LeaveTimeWarpper(leaveimes).warp();
    }
    
    /**
     * 新增请假
     */
    @RequestMapping(value = "/add")
    @ResponseBody
    public Object add(LeaveTime leaveTime) {
    	leaveTime.setUserId(AuthKit.getUser().getAccount());
    	
    	EntityWrapper<LeaveTime> entityWrapper = new EntityWrapper<LeaveTime>();
    	Wrapper<LeaveTime> result = entityWrapper.eq("userId", AuthKit.getUser().getAccount());
    	result = result.eq ("leaveDate", leaveTime.getLeaveDate());
    	LeaveTime leavetimeo = leaveTimeService.selectOne(result);
		if(leavetimeo!= null){
			//判断查出的工时的起始时间和新增的起始时间是否有重叠   有重复报错！无重叠插入
			if(DateUtils.isOverlap(leavetimeo.getStartTime(),leavetimeo.getEndTime(),leaveTime.getStartTime(),leaveTime.getEndTime())){
				return new ErrorTip(201,"与已录入请假的起始时间有重叠！");
			}
		}
		
		EntityWrapper<Worktime> workTimeEntityWrapper = new EntityWrapper<Worktime>();
		Wrapper<Worktime> workresult = workTimeEntityWrapper.eq("userId", AuthKit.getUser().getAccount());
		workresult = workresult.eq ("workDate", leaveTime.getLeaveDate());
		Worktime worktimeo = worktimeService.selectOne(workresult);
		if(worktimeo!= null){
			//判断查出的工时的起始时间和新增的起始时间是否有重叠   有重复报错！无重叠插入
			if(DateUtils.isOverlap(worktimeo.getStartTime(),worktimeo.getEndTime(),leaveTime.getStartTime(),leaveTime.getEndTime())){
				return new ErrorTip(202,"与已录入工时的起始时间有重叠！");
			}
		}
		
		EntityWrapper<OverTime> overEntityWrapper = new EntityWrapper<OverTime>();
		Wrapper<OverTime> overresult = overEntityWrapper.eq("userId", AuthKit.getUser().getAccount());
		overresult = overresult.eq ("overDate", leaveTime.getLeaveDate());
		OverTime overTimeo = overtimeService.selectOne(overresult);
		if(overTimeo!= null){
			//判断查出的工时的起始时间和新增的起始时间是否有重叠   有重复报错！无重叠插入
			if(DateUtils.isOverlap(overTimeo.getStartTime(),overTimeo.getEndTime(),leaveTime.getStartTime(),leaveTime.getEndTime())){
				return new ErrorTip(202,"与已录入加班的起始时间有重叠！");
			}
		}
		
        leaveTimeService.insert(leaveTime);
        return SUCCESS_TIP;
    }

    /**
     * 删除请假
     */
    @RequestMapping(value = "/delete")
    @ResponseBody
    public Object delete(@RequestParam Integer leaveTimeId) {
        leaveTimeService.deleteById(leaveTimeId);
        return SUCCESS_TIP;
    }

    /**
     * 修改请假
     */
    @RequestMapping(value = "/update")
    @ResponseBody
    public Object update(LeaveTime leaveTime) {
    	LeaveTime leavetimeo = leaveTimeService.selectById(leaveTime);
    	if(!leavetimeo.getLeaveDate().equals(leaveTime.getLeaveDate()) || !leavetimeo.getStartTime().equals(leaveTime.getStartTime()) || !leavetimeo.getEndTime().equals(leaveTime.getEndTime())){
	    	
    		EntityWrapper<LeaveTime> entityWrapper = new EntityWrapper<LeaveTime>();
        	Wrapper<LeaveTime> result = entityWrapper.eq("userId", AuthKit.getUser().getAccount());
        	result = result.eq ("leaveDate", leaveTime.getLeaveDate());
        	LeaveTime leavetimea = leaveTimeService.selectOne(result);
    		if(leavetimea!= null){
    			//判断查出的工时的起始时间和新增的起始时间是否有重叠   有重复报错！无重叠插入
    			if(DateUtils.isOverlap(leavetimea.getStartTime(),leavetimea.getEndTime(),leaveTime.getStartTime(),leaveTime.getEndTime())){
    				return new ErrorTip(201,"与已录入请假的起始时间有重叠！");
    			}
    		}
			
			EntityWrapper<Worktime> workTimeEntityWrapper = new EntityWrapper<Worktime>();
			Wrapper<Worktime> workresult = workTimeEntityWrapper.eq("userId", AuthKit.getUser().getAccount());
			workresult = workresult.eq ("workDate", leaveTime.getLeaveDate());
			Worktime worktimeo = worktimeService.selectOne(workresult);
			if(worktimeo!= null){
				//判断查出的工时的起始时间和新增的起始时间是否有重叠   有重复报错！无重叠插入
				if(DateUtils.isOverlap(worktimeo.getStartTime(),worktimeo.getEndTime(),leaveTime.getStartTime(),leaveTime.getEndTime())){
					return new ErrorTip(202,"与已录入工时的起始时间有重叠！");
				}
			}
			
			EntityWrapper<OverTime> overEntityWrapper = new EntityWrapper<OverTime>();
			Wrapper<OverTime> overresult = overEntityWrapper.eq("userId", AuthKit.getUser().getAccount());
			overresult = overresult.eq ("overDate", leaveTime.getLeaveDate());
			OverTime overTimeo = overtimeService.selectOne(overresult);
			if(overTimeo!= null){
				//判断查出的工时的起始时间和新增的起始时间是否有重叠   有重复报错！无重叠插入
				if(DateUtils.isOverlap(overTimeo.getStartTime(),overTimeo.getEndTime(),leaveTime.getStartTime(),leaveTime.getEndTime())){
					return new ErrorTip(202,"与已录入加班的起始时间有重叠！");
				}
			}
    	}
    	
        leaveTimeService.updateById(leaveTime);
        return SUCCESS_TIP;
    }
    
    /**
     * 提交/审核请假
     */
    @RequestMapping(value = "/updateStatus")
    @ResponseBody
    public int updateStatus(@RequestParam Integer status,@RequestParam Integer leaveTimeId) {
    	
    	int i = leaveTimeService.updateSubmitStatusById(status,leaveTimeId);
    	//插入审核记录表
    	if(i > 0){
    		if(status == 1){
    			SubmitRecord submitRecord = new SubmitRecord();
	    		VendorUser vendorUser = vendorUserService.selectByUserNO(AuthKit.getUser().getAccount());
	    		submitRecord.setType(3);
	    		submitRecord.setYwId(leaveTimeId);
	    		submitRecord.setSubmitUserId(AuthKit.getUser().getAccount());
	    		submitRecord.setAuditUserId(vendorUser.getLeaderId());
	    		submitRecordService.insert(submitRecord);
    		}else if(status == 2 || status == 3 ){
    			SubmitRecord submitRecord = submitRecordService.selectByTypeAndYwId(3, leaveTimeId);
	    		submitRecord.setAuditUserId(AuthKit.getUser().getAccount());
	    		submitRecord.setAuditTime(new Date());
	    		submitRecord.setAuditResult(ConstantFactory.me().getSubmitStatusName(status));
	    		submitRecordService.updateById(submitRecord);
	    		
	    		//审核通过时 拆分主表 按日期每天拆分一条数据   
	    		//需考虑首尾可能不为08 18 
	    		if(status == 2){
	    			LeaveTime leavetime = leaveTimeService.selectById(leaveTimeId);
	    			SimpleDateFormat datesdf = new SimpleDateFormat("yyyy-MM-dd");
	    			SimpleDateFormat timesdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    			String start = datesdf.format(leavetime.getStartTime());
	    			String end = datesdf.format(leavetime.getEndTime());
	    			Leavetimeitem leavetimeitem = new Leavetimeitem();
	    			leavetimeitem.setPid(leavetime.getId());
	    			leavetimeitem.setUserId(leavetime.getUserId());
	    			
	    			if(start.equals(end)){//1天
	    				leavetimeitem.setLeaveDate(leavetime.getLeaveDate());
						leavetimeitem.setStartTime(leavetime.getStartTime());
	    				leavetimeitem.setEndTime(leavetime.getEndTime());
	    				leavetimeitem.setLeaveTimeHour(leavetime.getLeaveTimeHour());
	    				leavetimeitemService.insert(leavetimeitem);
	    			}else{//多天
	    				Calendar cldstart = Calendar.getInstance();
	    				cldstart.setTime(leavetime.getStartTime());
	    				Calendar cldend = Calendar.getInstance();
	    				cldend.setTime(leavetime.getEndTime());
	    				
	    				//if(cldstart.get(Calendar.HOUR_OF_DAY) ==8 &&cldend.get(Calendar.HOUR_OF_DAY)==18){
	    					List<String> datelist= DateUtils.dateRange(leavetime.getStartTime(), leavetime.getEndTime()) ;
	    					for(int j = 0 ; j< datelist.size(); j++){
	    						
			    				if(projService.checkDateOnWork(datelist.get(j))>0){//如果当天上班 就插入一条记录到明细表
				    				try {
				    					Date startTime,endTime;
				    					int hour;
				    					if(j==0){
				    						startTime = leavetime.getStartTime();
				    						endTime = timesdf.parse(datelist.get(j)+" 18:00:00");
				    						if(cldstart.get(Calendar.HOUR_OF_DAY) == 8){
				    							hour=8; 
				    						}else{
				    							hour=4; ////需手动计算时长
				    						}
					    				}else if(j==datelist.size()){
				    						startTime = timesdf.parse(datelist.get(j)+" 08:00:00");
				    						endTime = leavetime.getEndTime();
				    						if(cldend.get(Calendar.HOUR_OF_DAY) == 18){
				    							hour=8; 
				    						}else{
				    							hour=4;////需手动计算时长
				    						}
					    				}else{
					    					startTime = timesdf.parse(datelist.get(j)+" 08:00:00");
					    					endTime = timesdf.parse(datelist.get(j)+" 18:00:00");
					    					hour=8;
					    				}
				    				
										leavetimeitem.setLeaveDate(datesdf.parse(datelist.get(j)));
										leavetimeitem.setStartTime(startTime);
					    				leavetimeitem.setEndTime(endTime);
					    				leavetimeitem.setLeaveTimeHour(new BigDecimal(hour));//？  首尾2天的时长不一定为8
				    				
				    				leavetimeitemService.insert(leavetimeitem);
				    				} catch (ParseException e) {
										e.printStackTrace();
									}
			    				}
	    					//}
	    				} 
	    				
	    			}
	    			
	    		}
	    		
	    		
    		}
    	}
    	return i;
    }
    /**
     * 提交/审核请假
     */
    @RequestMapping(value = "/batchUpdateStatus")
    @ResponseBody
    public Object batchUpdateStatus(@RequestParam Integer status,@RequestParam String ids) {
    	String[] leaveTimeIds = ids.split(" ");
    	for(int n=0;n<leaveTimeIds.length;n++){
	    	int i = leaveTimeService.updateSubmitStatusById(status,Integer.valueOf(leaveTimeIds[n]));
	    	//插入审核记录表
	    	if(i > 0){
	    		if(status == 1){
	    			SubmitRecord submitRecord = new SubmitRecord();
	    			VendorUser vendorUser = vendorUserService.selectByUserNO(AuthKit.getUser().getAccount());
	    			submitRecord.setType(3);
	    			submitRecord.setYwId(Integer.valueOf(leaveTimeIds[n]));
	    			submitRecord.setSubmitUserId(AuthKit.getUser().getAccount());
	    			submitRecord.setAuditUserId(vendorUser.getLeaderId());
	    			submitRecordService.insert(submitRecord);
	    		}else if(status == 2 || status == 3 ){
	    			SubmitRecord submitRecord = submitRecordService.selectByTypeAndYwId(3, Integer.valueOf(leaveTimeIds[n]));
	    			submitRecord.setAuditUserId(AuthKit.getUser().getAccount());
	    			submitRecord.setAuditTime(new Date());
	    			submitRecord.setAuditResult(ConstantFactory.me().getSubmitStatusName(status));
	    			submitRecordService.updateById(submitRecord);
	    		}
	    	}
    	}	
    	return SUCCESS_TIP;
    }
    /**
     * 请假详情
     */
    @RequestMapping(value = "/detail/{Id}")
    @ResponseBody
    public Object detail(@PathVariable("Id") Integer Id) {
        return leaveTimeService.selectById(Id);
    }
}

